// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ntc-goer/microservice-examples/registry/sagaorchestation/ent/sagalogs"
)

// SagaLogs is the model entity for the SagaLogs schema.
type SagaLogs struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// WorkflowID holds the value of the "workflow_id" field.
	WorkflowID string `json:"workflow_id,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID string `json:"request_id,omitempty"`
	// WorkflowName holds the value of the "workflow_name" field.
	WorkflowName string `json:"workflow_name,omitempty"`
	// StepName holds the value of the "step_name" field.
	StepName string `json:"step_name,omitempty"`
	// StepOrder holds the value of the "step_order" field.
	StepOrder int `json:"step_order,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SagaLogs) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sagalogs.FieldID, sagalogs.FieldStepOrder:
			values[i] = new(sql.NullInt64)
		case sagalogs.FieldWorkflowID, sagalogs.FieldRequestID, sagalogs.FieldWorkflowName, sagalogs.FieldStepName, sagalogs.FieldStatus, sagalogs.FieldMessage:
			values[i] = new(sql.NullString)
		case sagalogs.FieldUpdateAt, sagalogs.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SagaLogs fields.
func (sl *SagaLogs) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sagalogs.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sl.ID = int(value.Int64)
		case sagalogs.FieldWorkflowID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_id", values[i])
			} else if value.Valid {
				sl.WorkflowID = value.String
			}
		case sagalogs.FieldRequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				sl.RequestID = value.String
			}
		case sagalogs.FieldWorkflowName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_name", values[i])
			} else if value.Valid {
				sl.WorkflowName = value.String
			}
		case sagalogs.FieldStepName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field step_name", values[i])
			} else if value.Valid {
				sl.StepName = value.String
			}
		case sagalogs.FieldStepOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field step_order", values[i])
			} else if value.Valid {
				sl.StepOrder = int(value.Int64)
			}
		case sagalogs.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sl.Status = value.String
			}
		case sagalogs.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				sl.Message = value.String
			}
		case sagalogs.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				sl.UpdateAt = value.Time
			}
		case sagalogs.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sl.CreatedAt = value.Time
			}
		default:
			sl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SagaLogs.
// This includes values selected through modifiers, order, etc.
func (sl *SagaLogs) Value(name string) (ent.Value, error) {
	return sl.selectValues.Get(name)
}

// Update returns a builder for updating this SagaLogs.
// Note that you need to call SagaLogs.Unwrap() before calling this method if this SagaLogs
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *SagaLogs) Update() *SagaLogsUpdateOne {
	return NewSagaLogsClient(sl.config).UpdateOne(sl)
}

// Unwrap unwraps the SagaLogs entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *SagaLogs) Unwrap() *SagaLogs {
	_tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: SagaLogs is not a transactional entity")
	}
	sl.config.driver = _tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *SagaLogs) String() string {
	var builder strings.Builder
	builder.WriteString("SagaLogs(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sl.ID))
	builder.WriteString("workflow_id=")
	builder.WriteString(sl.WorkflowID)
	builder.WriteString(", ")
	builder.WriteString("request_id=")
	builder.WriteString(sl.RequestID)
	builder.WriteString(", ")
	builder.WriteString("workflow_name=")
	builder.WriteString(sl.WorkflowName)
	builder.WriteString(", ")
	builder.WriteString("step_name=")
	builder.WriteString(sl.StepName)
	builder.WriteString(", ")
	builder.WriteString("step_order=")
	builder.WriteString(fmt.Sprintf("%v", sl.StepOrder))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(sl.Status)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(sl.Message)
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(sl.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sl.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SagaLogsSlice is a parsable slice of SagaLogs.
type SagaLogsSlice []*SagaLogs
