// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ntc-goer/microservice-examples/registry/sagaorchestation/ent/predicate"
	"github.com/ntc-goer/microservice-examples/registry/sagaorchestation/ent/sagalogs"
)

// SagaLogsUpdate is the builder for updating SagaLogs entities.
type SagaLogsUpdate struct {
	config
	hooks    []Hook
	mutation *SagaLogsMutation
}

// Where appends a list predicates to the SagaLogsUpdate builder.
func (slu *SagaLogsUpdate) Where(ps ...predicate.SagaLogs) *SagaLogsUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetWorkflowID sets the "workflow_id" field.
func (slu *SagaLogsUpdate) SetWorkflowID(s string) *SagaLogsUpdate {
	slu.mutation.SetWorkflowID(s)
	return slu
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (slu *SagaLogsUpdate) SetNillableWorkflowID(s *string) *SagaLogsUpdate {
	if s != nil {
		slu.SetWorkflowID(*s)
	}
	return slu
}

// SetRequestID sets the "request_id" field.
func (slu *SagaLogsUpdate) SetRequestID(s string) *SagaLogsUpdate {
	slu.mutation.SetRequestID(s)
	return slu
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (slu *SagaLogsUpdate) SetNillableRequestID(s *string) *SagaLogsUpdate {
	if s != nil {
		slu.SetRequestID(*s)
	}
	return slu
}

// SetWorkflowName sets the "workflow_name" field.
func (slu *SagaLogsUpdate) SetWorkflowName(s string) *SagaLogsUpdate {
	slu.mutation.SetWorkflowName(s)
	return slu
}

// SetNillableWorkflowName sets the "workflow_name" field if the given value is not nil.
func (slu *SagaLogsUpdate) SetNillableWorkflowName(s *string) *SagaLogsUpdate {
	if s != nil {
		slu.SetWorkflowName(*s)
	}
	return slu
}

// SetStepName sets the "step_name" field.
func (slu *SagaLogsUpdate) SetStepName(s string) *SagaLogsUpdate {
	slu.mutation.SetStepName(s)
	return slu
}

// SetNillableStepName sets the "step_name" field if the given value is not nil.
func (slu *SagaLogsUpdate) SetNillableStepName(s *string) *SagaLogsUpdate {
	if s != nil {
		slu.SetStepName(*s)
	}
	return slu
}

// SetStepOrder sets the "step_order" field.
func (slu *SagaLogsUpdate) SetStepOrder(i int) *SagaLogsUpdate {
	slu.mutation.ResetStepOrder()
	slu.mutation.SetStepOrder(i)
	return slu
}

// SetNillableStepOrder sets the "step_order" field if the given value is not nil.
func (slu *SagaLogsUpdate) SetNillableStepOrder(i *int) *SagaLogsUpdate {
	if i != nil {
		slu.SetStepOrder(*i)
	}
	return slu
}

// AddStepOrder adds i to the "step_order" field.
func (slu *SagaLogsUpdate) AddStepOrder(i int) *SagaLogsUpdate {
	slu.mutation.AddStepOrder(i)
	return slu
}

// SetStatus sets the "status" field.
func (slu *SagaLogsUpdate) SetStatus(s string) *SagaLogsUpdate {
	slu.mutation.SetStatus(s)
	return slu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (slu *SagaLogsUpdate) SetNillableStatus(s *string) *SagaLogsUpdate {
	if s != nil {
		slu.SetStatus(*s)
	}
	return slu
}

// SetMessage sets the "message" field.
func (slu *SagaLogsUpdate) SetMessage(s string) *SagaLogsUpdate {
	slu.mutation.SetMessage(s)
	return slu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (slu *SagaLogsUpdate) SetNillableMessage(s *string) *SagaLogsUpdate {
	if s != nil {
		slu.SetMessage(*s)
	}
	return slu
}

// SetUpdateAt sets the "update_at" field.
func (slu *SagaLogsUpdate) SetUpdateAt(t time.Time) *SagaLogsUpdate {
	slu.mutation.SetUpdateAt(t)
	return slu
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (slu *SagaLogsUpdate) SetNillableUpdateAt(t *time.Time) *SagaLogsUpdate {
	if t != nil {
		slu.SetUpdateAt(*t)
	}
	return slu
}

// SetCreatedAt sets the "created_at" field.
func (slu *SagaLogsUpdate) SetCreatedAt(t time.Time) *SagaLogsUpdate {
	slu.mutation.SetCreatedAt(t)
	return slu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (slu *SagaLogsUpdate) SetNillableCreatedAt(t *time.Time) *SagaLogsUpdate {
	if t != nil {
		slu.SetCreatedAt(*t)
	}
	return slu
}

// Mutation returns the SagaLogsMutation object of the builder.
func (slu *SagaLogsUpdate) Mutation() *SagaLogsMutation {
	return slu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *SagaLogsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, slu.sqlSave, slu.mutation, slu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (slu *SagaLogsUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *SagaLogsUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *SagaLogsUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slu *SagaLogsUpdate) check() error {
	if v, ok := slu.mutation.WorkflowID(); ok {
		if err := sagalogs.WorkflowIDValidator(v); err != nil {
			return &ValidationError{Name: "workflow_id", err: fmt.Errorf(`ent: validator failed for field "SagaLogs.workflow_id": %w`, err)}
		}
	}
	if v, ok := slu.mutation.RequestID(); ok {
		if err := sagalogs.RequestIDValidator(v); err != nil {
			return &ValidationError{Name: "request_id", err: fmt.Errorf(`ent: validator failed for field "SagaLogs.request_id": %w`, err)}
		}
	}
	if v, ok := slu.mutation.WorkflowName(); ok {
		if err := sagalogs.WorkflowNameValidator(v); err != nil {
			return &ValidationError{Name: "workflow_name", err: fmt.Errorf(`ent: validator failed for field "SagaLogs.workflow_name": %w`, err)}
		}
	}
	if v, ok := slu.mutation.StepName(); ok {
		if err := sagalogs.StepNameValidator(v); err != nil {
			return &ValidationError{Name: "step_name", err: fmt.Errorf(`ent: validator failed for field "SagaLogs.step_name": %w`, err)}
		}
	}
	if v, ok := slu.mutation.Status(); ok {
		if err := sagalogs.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SagaLogs.status": %w`, err)}
		}
	}
	if v, ok := slu.mutation.Message(); ok {
		if err := sagalogs.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "SagaLogs.message": %w`, err)}
		}
	}
	return nil
}

func (slu *SagaLogsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := slu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagalogs.Table, sagalogs.Columns, sqlgraph.NewFieldSpec(sagalogs.FieldID, field.TypeInt))
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slu.mutation.WorkflowID(); ok {
		_spec.SetField(sagalogs.FieldWorkflowID, field.TypeString, value)
	}
	if value, ok := slu.mutation.RequestID(); ok {
		_spec.SetField(sagalogs.FieldRequestID, field.TypeString, value)
	}
	if value, ok := slu.mutation.WorkflowName(); ok {
		_spec.SetField(sagalogs.FieldWorkflowName, field.TypeString, value)
	}
	if value, ok := slu.mutation.StepName(); ok {
		_spec.SetField(sagalogs.FieldStepName, field.TypeString, value)
	}
	if value, ok := slu.mutation.StepOrder(); ok {
		_spec.SetField(sagalogs.FieldStepOrder, field.TypeInt, value)
	}
	if value, ok := slu.mutation.AddedStepOrder(); ok {
		_spec.AddField(sagalogs.FieldStepOrder, field.TypeInt, value)
	}
	if value, ok := slu.mutation.Status(); ok {
		_spec.SetField(sagalogs.FieldStatus, field.TypeString, value)
	}
	if value, ok := slu.mutation.Message(); ok {
		_spec.SetField(sagalogs.FieldMessage, field.TypeString, value)
	}
	if value, ok := slu.mutation.UpdateAt(); ok {
		_spec.SetField(sagalogs.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := slu.mutation.CreatedAt(); ok {
		_spec.SetField(sagalogs.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagalogs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	slu.mutation.done = true
	return n, nil
}

// SagaLogsUpdateOne is the builder for updating a single SagaLogs entity.
type SagaLogsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SagaLogsMutation
}

// SetWorkflowID sets the "workflow_id" field.
func (sluo *SagaLogsUpdateOne) SetWorkflowID(s string) *SagaLogsUpdateOne {
	sluo.mutation.SetWorkflowID(s)
	return sluo
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (sluo *SagaLogsUpdateOne) SetNillableWorkflowID(s *string) *SagaLogsUpdateOne {
	if s != nil {
		sluo.SetWorkflowID(*s)
	}
	return sluo
}

// SetRequestID sets the "request_id" field.
func (sluo *SagaLogsUpdateOne) SetRequestID(s string) *SagaLogsUpdateOne {
	sluo.mutation.SetRequestID(s)
	return sluo
}

// SetNillableRequestID sets the "request_id" field if the given value is not nil.
func (sluo *SagaLogsUpdateOne) SetNillableRequestID(s *string) *SagaLogsUpdateOne {
	if s != nil {
		sluo.SetRequestID(*s)
	}
	return sluo
}

// SetWorkflowName sets the "workflow_name" field.
func (sluo *SagaLogsUpdateOne) SetWorkflowName(s string) *SagaLogsUpdateOne {
	sluo.mutation.SetWorkflowName(s)
	return sluo
}

// SetNillableWorkflowName sets the "workflow_name" field if the given value is not nil.
func (sluo *SagaLogsUpdateOne) SetNillableWorkflowName(s *string) *SagaLogsUpdateOne {
	if s != nil {
		sluo.SetWorkflowName(*s)
	}
	return sluo
}

// SetStepName sets the "step_name" field.
func (sluo *SagaLogsUpdateOne) SetStepName(s string) *SagaLogsUpdateOne {
	sluo.mutation.SetStepName(s)
	return sluo
}

// SetNillableStepName sets the "step_name" field if the given value is not nil.
func (sluo *SagaLogsUpdateOne) SetNillableStepName(s *string) *SagaLogsUpdateOne {
	if s != nil {
		sluo.SetStepName(*s)
	}
	return sluo
}

// SetStepOrder sets the "step_order" field.
func (sluo *SagaLogsUpdateOne) SetStepOrder(i int) *SagaLogsUpdateOne {
	sluo.mutation.ResetStepOrder()
	sluo.mutation.SetStepOrder(i)
	return sluo
}

// SetNillableStepOrder sets the "step_order" field if the given value is not nil.
func (sluo *SagaLogsUpdateOne) SetNillableStepOrder(i *int) *SagaLogsUpdateOne {
	if i != nil {
		sluo.SetStepOrder(*i)
	}
	return sluo
}

// AddStepOrder adds i to the "step_order" field.
func (sluo *SagaLogsUpdateOne) AddStepOrder(i int) *SagaLogsUpdateOne {
	sluo.mutation.AddStepOrder(i)
	return sluo
}

// SetStatus sets the "status" field.
func (sluo *SagaLogsUpdateOne) SetStatus(s string) *SagaLogsUpdateOne {
	sluo.mutation.SetStatus(s)
	return sluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sluo *SagaLogsUpdateOne) SetNillableStatus(s *string) *SagaLogsUpdateOne {
	if s != nil {
		sluo.SetStatus(*s)
	}
	return sluo
}

// SetMessage sets the "message" field.
func (sluo *SagaLogsUpdateOne) SetMessage(s string) *SagaLogsUpdateOne {
	sluo.mutation.SetMessage(s)
	return sluo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (sluo *SagaLogsUpdateOne) SetNillableMessage(s *string) *SagaLogsUpdateOne {
	if s != nil {
		sluo.SetMessage(*s)
	}
	return sluo
}

// SetUpdateAt sets the "update_at" field.
func (sluo *SagaLogsUpdateOne) SetUpdateAt(t time.Time) *SagaLogsUpdateOne {
	sluo.mutation.SetUpdateAt(t)
	return sluo
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (sluo *SagaLogsUpdateOne) SetNillableUpdateAt(t *time.Time) *SagaLogsUpdateOne {
	if t != nil {
		sluo.SetUpdateAt(*t)
	}
	return sluo
}

// SetCreatedAt sets the "created_at" field.
func (sluo *SagaLogsUpdateOne) SetCreatedAt(t time.Time) *SagaLogsUpdateOne {
	sluo.mutation.SetCreatedAt(t)
	return sluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sluo *SagaLogsUpdateOne) SetNillableCreatedAt(t *time.Time) *SagaLogsUpdateOne {
	if t != nil {
		sluo.SetCreatedAt(*t)
	}
	return sluo
}

// Mutation returns the SagaLogsMutation object of the builder.
func (sluo *SagaLogsUpdateOne) Mutation() *SagaLogsMutation {
	return sluo.mutation
}

// Where appends a list predicates to the SagaLogsUpdate builder.
func (sluo *SagaLogsUpdateOne) Where(ps ...predicate.SagaLogs) *SagaLogsUpdateOne {
	sluo.mutation.Where(ps...)
	return sluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *SagaLogsUpdateOne) Select(field string, fields ...string) *SagaLogsUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated SagaLogs entity.
func (sluo *SagaLogsUpdateOne) Save(ctx context.Context) (*SagaLogs, error) {
	return withHooks(ctx, sluo.sqlSave, sluo.mutation, sluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *SagaLogsUpdateOne) SaveX(ctx context.Context) *SagaLogs {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *SagaLogsUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *SagaLogsUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sluo *SagaLogsUpdateOne) check() error {
	if v, ok := sluo.mutation.WorkflowID(); ok {
		if err := sagalogs.WorkflowIDValidator(v); err != nil {
			return &ValidationError{Name: "workflow_id", err: fmt.Errorf(`ent: validator failed for field "SagaLogs.workflow_id": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.RequestID(); ok {
		if err := sagalogs.RequestIDValidator(v); err != nil {
			return &ValidationError{Name: "request_id", err: fmt.Errorf(`ent: validator failed for field "SagaLogs.request_id": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.WorkflowName(); ok {
		if err := sagalogs.WorkflowNameValidator(v); err != nil {
			return &ValidationError{Name: "workflow_name", err: fmt.Errorf(`ent: validator failed for field "SagaLogs.workflow_name": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.StepName(); ok {
		if err := sagalogs.StepNameValidator(v); err != nil {
			return &ValidationError{Name: "step_name", err: fmt.Errorf(`ent: validator failed for field "SagaLogs.step_name": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.Status(); ok {
		if err := sagalogs.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SagaLogs.status": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.Message(); ok {
		if err := sagalogs.MessageValidator(v); err != nil {
			return &ValidationError{Name: "message", err: fmt.Errorf(`ent: validator failed for field "SagaLogs.message": %w`, err)}
		}
	}
	return nil
}

func (sluo *SagaLogsUpdateOne) sqlSave(ctx context.Context) (_node *SagaLogs, err error) {
	if err := sluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(sagalogs.Table, sagalogs.Columns, sqlgraph.NewFieldSpec(sagalogs.FieldID, field.TypeInt))
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SagaLogs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sagalogs.FieldID)
		for _, f := range fields {
			if !sagalogs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sagalogs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sluo.mutation.WorkflowID(); ok {
		_spec.SetField(sagalogs.FieldWorkflowID, field.TypeString, value)
	}
	if value, ok := sluo.mutation.RequestID(); ok {
		_spec.SetField(sagalogs.FieldRequestID, field.TypeString, value)
	}
	if value, ok := sluo.mutation.WorkflowName(); ok {
		_spec.SetField(sagalogs.FieldWorkflowName, field.TypeString, value)
	}
	if value, ok := sluo.mutation.StepName(); ok {
		_spec.SetField(sagalogs.FieldStepName, field.TypeString, value)
	}
	if value, ok := sluo.mutation.StepOrder(); ok {
		_spec.SetField(sagalogs.FieldStepOrder, field.TypeInt, value)
	}
	if value, ok := sluo.mutation.AddedStepOrder(); ok {
		_spec.AddField(sagalogs.FieldStepOrder, field.TypeInt, value)
	}
	if value, ok := sluo.mutation.Status(); ok {
		_spec.SetField(sagalogs.FieldStatus, field.TypeString, value)
	}
	if value, ok := sluo.mutation.Message(); ok {
		_spec.SetField(sagalogs.FieldMessage, field.TypeString, value)
	}
	if value, ok := sluo.mutation.UpdateAt(); ok {
		_spec.SetField(sagalogs.FieldUpdateAt, field.TypeTime, value)
	}
	if value, ok := sluo.mutation.CreatedAt(); ok {
		_spec.SetField(sagalogs.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &SagaLogs{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sagalogs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sluo.mutation.done = true
	return _node, nil
}
