// Code generated by ent, DO NOT EDIT.

package sagalogs

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ntc-goer/microservice-examples/registry/sagaorchestation/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldLTE(FieldID, id))
}

// WorkflowID applies equality check predicate on the "workflow_id" field. It's identical to WorkflowIDEQ.
func WorkflowID(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldEQ(FieldWorkflowID, v))
}

// WorkflowName applies equality check predicate on the "workflow_name" field. It's identical to WorkflowNameEQ.
func WorkflowName(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldEQ(FieldWorkflowName, v))
}

// StepName applies equality check predicate on the "step_name" field. It's identical to StepNameEQ.
func StepName(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldEQ(FieldStepName, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldEQ(FieldUpdateAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldEQ(FieldCreatedAt, v))
}

// WorkflowIDEQ applies the EQ predicate on the "workflow_id" field.
func WorkflowIDEQ(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldEQ(FieldWorkflowID, v))
}

// WorkflowIDNEQ applies the NEQ predicate on the "workflow_id" field.
func WorkflowIDNEQ(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldNEQ(FieldWorkflowID, v))
}

// WorkflowIDIn applies the In predicate on the "workflow_id" field.
func WorkflowIDIn(vs ...string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldIn(FieldWorkflowID, vs...))
}

// WorkflowIDNotIn applies the NotIn predicate on the "workflow_id" field.
func WorkflowIDNotIn(vs ...string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldNotIn(FieldWorkflowID, vs...))
}

// WorkflowIDGT applies the GT predicate on the "workflow_id" field.
func WorkflowIDGT(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldGT(FieldWorkflowID, v))
}

// WorkflowIDGTE applies the GTE predicate on the "workflow_id" field.
func WorkflowIDGTE(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldGTE(FieldWorkflowID, v))
}

// WorkflowIDLT applies the LT predicate on the "workflow_id" field.
func WorkflowIDLT(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldLT(FieldWorkflowID, v))
}

// WorkflowIDLTE applies the LTE predicate on the "workflow_id" field.
func WorkflowIDLTE(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldLTE(FieldWorkflowID, v))
}

// WorkflowIDContains applies the Contains predicate on the "workflow_id" field.
func WorkflowIDContains(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldContains(FieldWorkflowID, v))
}

// WorkflowIDHasPrefix applies the HasPrefix predicate on the "workflow_id" field.
func WorkflowIDHasPrefix(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldHasPrefix(FieldWorkflowID, v))
}

// WorkflowIDHasSuffix applies the HasSuffix predicate on the "workflow_id" field.
func WorkflowIDHasSuffix(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldHasSuffix(FieldWorkflowID, v))
}

// WorkflowIDEqualFold applies the EqualFold predicate on the "workflow_id" field.
func WorkflowIDEqualFold(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldEqualFold(FieldWorkflowID, v))
}

// WorkflowIDContainsFold applies the ContainsFold predicate on the "workflow_id" field.
func WorkflowIDContainsFold(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldContainsFold(FieldWorkflowID, v))
}

// WorkflowNameEQ applies the EQ predicate on the "workflow_name" field.
func WorkflowNameEQ(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldEQ(FieldWorkflowName, v))
}

// WorkflowNameNEQ applies the NEQ predicate on the "workflow_name" field.
func WorkflowNameNEQ(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldNEQ(FieldWorkflowName, v))
}

// WorkflowNameIn applies the In predicate on the "workflow_name" field.
func WorkflowNameIn(vs ...string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldIn(FieldWorkflowName, vs...))
}

// WorkflowNameNotIn applies the NotIn predicate on the "workflow_name" field.
func WorkflowNameNotIn(vs ...string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldNotIn(FieldWorkflowName, vs...))
}

// WorkflowNameGT applies the GT predicate on the "workflow_name" field.
func WorkflowNameGT(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldGT(FieldWorkflowName, v))
}

// WorkflowNameGTE applies the GTE predicate on the "workflow_name" field.
func WorkflowNameGTE(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldGTE(FieldWorkflowName, v))
}

// WorkflowNameLT applies the LT predicate on the "workflow_name" field.
func WorkflowNameLT(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldLT(FieldWorkflowName, v))
}

// WorkflowNameLTE applies the LTE predicate on the "workflow_name" field.
func WorkflowNameLTE(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldLTE(FieldWorkflowName, v))
}

// WorkflowNameContains applies the Contains predicate on the "workflow_name" field.
func WorkflowNameContains(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldContains(FieldWorkflowName, v))
}

// WorkflowNameHasPrefix applies the HasPrefix predicate on the "workflow_name" field.
func WorkflowNameHasPrefix(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldHasPrefix(FieldWorkflowName, v))
}

// WorkflowNameHasSuffix applies the HasSuffix predicate on the "workflow_name" field.
func WorkflowNameHasSuffix(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldHasSuffix(FieldWorkflowName, v))
}

// WorkflowNameEqualFold applies the EqualFold predicate on the "workflow_name" field.
func WorkflowNameEqualFold(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldEqualFold(FieldWorkflowName, v))
}

// WorkflowNameContainsFold applies the ContainsFold predicate on the "workflow_name" field.
func WorkflowNameContainsFold(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldContainsFold(FieldWorkflowName, v))
}

// StepNameEQ applies the EQ predicate on the "step_name" field.
func StepNameEQ(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldEQ(FieldStepName, v))
}

// StepNameNEQ applies the NEQ predicate on the "step_name" field.
func StepNameNEQ(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldNEQ(FieldStepName, v))
}

// StepNameIn applies the In predicate on the "step_name" field.
func StepNameIn(vs ...string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldIn(FieldStepName, vs...))
}

// StepNameNotIn applies the NotIn predicate on the "step_name" field.
func StepNameNotIn(vs ...string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldNotIn(FieldStepName, vs...))
}

// StepNameGT applies the GT predicate on the "step_name" field.
func StepNameGT(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldGT(FieldStepName, v))
}

// StepNameGTE applies the GTE predicate on the "step_name" field.
func StepNameGTE(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldGTE(FieldStepName, v))
}

// StepNameLT applies the LT predicate on the "step_name" field.
func StepNameLT(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldLT(FieldStepName, v))
}

// StepNameLTE applies the LTE predicate on the "step_name" field.
func StepNameLTE(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldLTE(FieldStepName, v))
}

// StepNameContains applies the Contains predicate on the "step_name" field.
func StepNameContains(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldContains(FieldStepName, v))
}

// StepNameHasPrefix applies the HasPrefix predicate on the "step_name" field.
func StepNameHasPrefix(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldHasPrefix(FieldStepName, v))
}

// StepNameHasSuffix applies the HasSuffix predicate on the "step_name" field.
func StepNameHasSuffix(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldHasSuffix(FieldStepName, v))
}

// StepNameEqualFold applies the EqualFold predicate on the "step_name" field.
func StepNameEqualFold(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldEqualFold(FieldStepName, v))
}

// StepNameContainsFold applies the ContainsFold predicate on the "step_name" field.
func StepNameContainsFold(v string) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldContainsFold(FieldStepName, v))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldLTE(FieldUpdateAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SagaLogs {
	return predicate.SagaLogs(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SagaLogs) predicate.SagaLogs {
	return predicate.SagaLogs(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SagaLogs) predicate.SagaLogs {
	return predicate.SagaLogs(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SagaLogs) predicate.SagaLogs {
	return predicate.SagaLogs(sql.NotPredicates(p))
}
