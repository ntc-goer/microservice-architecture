// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/ntc-goer/microservice-examples/kitchen/config"
	"github.com/ntc-goer/microservice-examples/kitchen/repository"
	"github.com/ntc-goer/microservice-examples/kitchen/service"
	"github.com/ntc-goer/microservice-examples/registry/serviceregistration/common"
	"github.com/ntc-goer/microservice-examples/registry/serviceregistration/consul"
)

// Injectors from wire.go:

//go:generate wire
func InitializeDependency(dcType string) (*CoreDependency, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	healthService, err := service.NewHealthService()
	if err != nil {
		return nil, err
	}
	repositoryRepository, err := repository.NewRepository(configConfig)
	if err != nil {
		return nil, err
	}
	kitchenService, err := service.NewKitchenService(configConfig, repositoryRepository)
	if err != nil {
		return nil, err
	}
	coreService := service.NewCoreService(healthService, kitchenService)
	registry, err := consul.NewRegistry()
	if err != nil {
		return nil, err
	}
	coreDependency := NewCoreDependency(configConfig, coreService, registry, repositoryRepository)
	return coreDependency, nil
}

// wire.go:

type CoreDependency struct {
	Config           *config.Config
	Service          *service.CoreService
	ServiceDiscovery common.DiscoveryI
	Repository       *repository.Repository
}

func NewCoreDependency(cfg *config.Config, coreSrv *service.CoreService, srvDis common.DiscoveryI, repo *repository.Repository) *CoreDependency {
	return &CoreDependency{
		Config:           cfg,
		Service:          coreSrv,
		ServiceDiscovery: srvDis,
		Repository:       repo,
	}
}
