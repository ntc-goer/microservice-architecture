// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/ntc-goer/microservice-examples/orderservice/ent/dish"
)

// Dish is the model entity for the Dish schema.
type Dish struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID uuid.UUID `json:"order_id,omitempty"`
	// DishName holds the value of the "dish_name" field.
	DishName string `json:"dish_name,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt time.Time `json:"update_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dish) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dish.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case dish.FieldDishName:
			values[i] = new(sql.NullString)
		case dish.FieldUpdateAt, dish.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case dish.FieldID, dish.FieldOrderID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dish fields.
func (d *Dish) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dish.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case dish.FieldOrderID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value != nil {
				d.OrderID = *value
			}
		case dish.FieldDishName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dish_name", values[i])
			} else if value.Valid {
				d.DishName = value.String
			}
		case dish.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				d.Quantity = int(value.Int64)
			}
		case dish.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				d.UpdateAt = value.Time
			}
		case dish.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Dish.
// This includes values selected through modifiers, order, etc.
func (d *Dish) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// Update returns a builder for updating this Dish.
// Note that you need to call Dish.Unwrap() before calling this method if this Dish
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dish) Update() *DishUpdateOne {
	return NewDishClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Dish entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dish) Unwrap() *Dish {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dish is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dish) String() string {
	var builder strings.Builder
	builder.WriteString("Dish(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", d.OrderID))
	builder.WriteString(", ")
	builder.WriteString("dish_name=")
	builder.WriteString(d.DishName)
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", d.Quantity))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(d.UpdateAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Dishes is a parsable slice of Dish.
type Dishes []*Dish
