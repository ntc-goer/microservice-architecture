// Code generated by ent, DO NOT EDIT.

package dish

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/ntc-goer/microservice-examples/orderservice/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldLTE(FieldID, id))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldEQ(FieldOrderID, v))
}

// DishID applies equality check predicate on the "dish_id" field. It's identical to DishIDEQ.
func DishID(v string) predicate.Dish {
	return predicate.Dish(sql.FieldEQ(FieldDishID, v))
}

// DishName applies equality check predicate on the "dish_name" field. It's identical to DishNameEQ.
func DishName(v string) predicate.Dish {
	return predicate.Dish(sql.FieldEQ(FieldDishName, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.Dish {
	return predicate.Dish(sql.FieldEQ(FieldQuantity, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldEQ(FieldUpdateAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldEQ(FieldCreatedAt, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldGT(FieldOrderID, v))
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldGTE(FieldOrderID, v))
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldLT(FieldOrderID, v))
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v uuid.UUID) predicate.Dish {
	return predicate.Dish(sql.FieldLTE(FieldOrderID, v))
}

// DishIDEQ applies the EQ predicate on the "dish_id" field.
func DishIDEQ(v string) predicate.Dish {
	return predicate.Dish(sql.FieldEQ(FieldDishID, v))
}

// DishIDNEQ applies the NEQ predicate on the "dish_id" field.
func DishIDNEQ(v string) predicate.Dish {
	return predicate.Dish(sql.FieldNEQ(FieldDishID, v))
}

// DishIDIn applies the In predicate on the "dish_id" field.
func DishIDIn(vs ...string) predicate.Dish {
	return predicate.Dish(sql.FieldIn(FieldDishID, vs...))
}

// DishIDNotIn applies the NotIn predicate on the "dish_id" field.
func DishIDNotIn(vs ...string) predicate.Dish {
	return predicate.Dish(sql.FieldNotIn(FieldDishID, vs...))
}

// DishIDGT applies the GT predicate on the "dish_id" field.
func DishIDGT(v string) predicate.Dish {
	return predicate.Dish(sql.FieldGT(FieldDishID, v))
}

// DishIDGTE applies the GTE predicate on the "dish_id" field.
func DishIDGTE(v string) predicate.Dish {
	return predicate.Dish(sql.FieldGTE(FieldDishID, v))
}

// DishIDLT applies the LT predicate on the "dish_id" field.
func DishIDLT(v string) predicate.Dish {
	return predicate.Dish(sql.FieldLT(FieldDishID, v))
}

// DishIDLTE applies the LTE predicate on the "dish_id" field.
func DishIDLTE(v string) predicate.Dish {
	return predicate.Dish(sql.FieldLTE(FieldDishID, v))
}

// DishIDContains applies the Contains predicate on the "dish_id" field.
func DishIDContains(v string) predicate.Dish {
	return predicate.Dish(sql.FieldContains(FieldDishID, v))
}

// DishIDHasPrefix applies the HasPrefix predicate on the "dish_id" field.
func DishIDHasPrefix(v string) predicate.Dish {
	return predicate.Dish(sql.FieldHasPrefix(FieldDishID, v))
}

// DishIDHasSuffix applies the HasSuffix predicate on the "dish_id" field.
func DishIDHasSuffix(v string) predicate.Dish {
	return predicate.Dish(sql.FieldHasSuffix(FieldDishID, v))
}

// DishIDEqualFold applies the EqualFold predicate on the "dish_id" field.
func DishIDEqualFold(v string) predicate.Dish {
	return predicate.Dish(sql.FieldEqualFold(FieldDishID, v))
}

// DishIDContainsFold applies the ContainsFold predicate on the "dish_id" field.
func DishIDContainsFold(v string) predicate.Dish {
	return predicate.Dish(sql.FieldContainsFold(FieldDishID, v))
}

// DishNameEQ applies the EQ predicate on the "dish_name" field.
func DishNameEQ(v string) predicate.Dish {
	return predicate.Dish(sql.FieldEQ(FieldDishName, v))
}

// DishNameNEQ applies the NEQ predicate on the "dish_name" field.
func DishNameNEQ(v string) predicate.Dish {
	return predicate.Dish(sql.FieldNEQ(FieldDishName, v))
}

// DishNameIn applies the In predicate on the "dish_name" field.
func DishNameIn(vs ...string) predicate.Dish {
	return predicate.Dish(sql.FieldIn(FieldDishName, vs...))
}

// DishNameNotIn applies the NotIn predicate on the "dish_name" field.
func DishNameNotIn(vs ...string) predicate.Dish {
	return predicate.Dish(sql.FieldNotIn(FieldDishName, vs...))
}

// DishNameGT applies the GT predicate on the "dish_name" field.
func DishNameGT(v string) predicate.Dish {
	return predicate.Dish(sql.FieldGT(FieldDishName, v))
}

// DishNameGTE applies the GTE predicate on the "dish_name" field.
func DishNameGTE(v string) predicate.Dish {
	return predicate.Dish(sql.FieldGTE(FieldDishName, v))
}

// DishNameLT applies the LT predicate on the "dish_name" field.
func DishNameLT(v string) predicate.Dish {
	return predicate.Dish(sql.FieldLT(FieldDishName, v))
}

// DishNameLTE applies the LTE predicate on the "dish_name" field.
func DishNameLTE(v string) predicate.Dish {
	return predicate.Dish(sql.FieldLTE(FieldDishName, v))
}

// DishNameContains applies the Contains predicate on the "dish_name" field.
func DishNameContains(v string) predicate.Dish {
	return predicate.Dish(sql.FieldContains(FieldDishName, v))
}

// DishNameHasPrefix applies the HasPrefix predicate on the "dish_name" field.
func DishNameHasPrefix(v string) predicate.Dish {
	return predicate.Dish(sql.FieldHasPrefix(FieldDishName, v))
}

// DishNameHasSuffix applies the HasSuffix predicate on the "dish_name" field.
func DishNameHasSuffix(v string) predicate.Dish {
	return predicate.Dish(sql.FieldHasSuffix(FieldDishName, v))
}

// DishNameEqualFold applies the EqualFold predicate on the "dish_name" field.
func DishNameEqualFold(v string) predicate.Dish {
	return predicate.Dish(sql.FieldEqualFold(FieldDishName, v))
}

// DishNameContainsFold applies the ContainsFold predicate on the "dish_name" field.
func DishNameContainsFold(v string) predicate.Dish {
	return predicate.Dish(sql.FieldContainsFold(FieldDishName, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.Dish {
	return predicate.Dish(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.Dish {
	return predicate.Dish(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.Dish {
	return predicate.Dish(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.Dish {
	return predicate.Dish(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.Dish {
	return predicate.Dish(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.Dish {
	return predicate.Dish(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.Dish {
	return predicate.Dish(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.Dish {
	return predicate.Dish(sql.FieldLTE(FieldQuantity, v))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldLTE(FieldUpdateAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Dish {
	return predicate.Dish(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Dish) predicate.Dish {
	return predicate.Dish(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Dish) predicate.Dish {
	return predicate.Dish(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Dish) predicate.Dish {
	return predicate.Dish(sql.NotPredicates(p))
}
